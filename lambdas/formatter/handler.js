/* eslint-disable no-console */
import { setClipData } from './db';
import {
  findSuperClips, hydrateClips, ClipsTypeEnum, removeSuperClipDuplicates,
} from './clips';

const { MONGODB_FULL_URI_ARN, DB_NAME, TESTING } = process.env;

exports.main = async (event) => {
  console.log(event);
  const { videoId, clips } = event[0];
  const [autoGeneratedClips, manualClips] = clips;
  const [autoGeneratedThumbnails, manualGeneratedThumbnails] = event[0].thumbnails;

  const cccClips = event[1];
  const aiHydratedClips = hydrateClips(
    autoGeneratedClips,
    ClipsTypeEnum.ai,
    autoGeneratedThumbnails,
  );
  const manualHydratedClips = hydrateClips(
    manualClips,
    ClipsTypeEnum.manual,
    manualGeneratedThumbnails,
  );

  const cccHydratedClips = hydrateClips(cccClips, ClipsTypeEnum.ccc);

  const hydratedClips = [...aiHydratedClips, ...manualHydratedClips, ...cccHydratedClips];
  const filteredHydratedClips = hydratedClips.filter((clip) => clip.endTime - clip.startTime > 5);
  const superClips = findSuperClips(filteredHydratedClips);
  const allClips = removeSuperClipDuplicates(filteredHydratedClips, superClips);
  const sortedClips = allClips.sort((a, b) => a.startTime - b.startTime);
  const combinedClips = {
    clips: sortedClips,
    videoId,
  };

  if (TESTING === 'true') {
    return combinedClips;
  }

  const result = await setClipData(MONGODB_FULL_URI_ARN, DB_NAME, videoId, combinedClips);
  console.log(result);

  return combinedClips;
};
