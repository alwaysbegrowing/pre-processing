/* eslint-disable no-console */
import { v4 as uuidv4 } from 'uuid';
import { setClipData } from './db';

const ClipsTypeEnum = Object.freeze({ ai: 'ai', ccc: 'ccc', manual: 'manual' });

const { MONGODB_FULL_URI_ARN, DB_NAME, TESTING } = process.env;

const RUN_MONGO = TESTING === 'false' || TESTING === undefined;

const hydrateClips = (clips, type, thumbnails = []) => {
  console.log({ clips });
  return clips.map((clip, i) => ({
    type,
    id: uuidv4(),
    thumbnail_url: thumbnails[i],
    ...clip,
  }));
};
exports.main = async (event) => {
  console.log(event);
  const { videoId, clips } = event[0];
  const [autoGeneratedClips, manualClips] = clips;
  const [autoGeneratedThumbnails, manualGeneratedThumbnails] = event[0].thumbnails;

  const cccClips = event[1];
  const aiHydratedClips = hydrateClips(
    autoGeneratedClips,
    ClipsTypeEnum.ai,
    autoGeneratedThumbnails,
  );
  const manualHydratedClips = hydrateClips(
    manualClips,
    ClipsTypeEnum.manual,
    manualGeneratedThumbnails,
  );

  const cccHydratedClips = hydrateClips(cccClips, ClipsTypeEnum.ccc);
  const allClips = [...aiHydratedClips, ...manualHydratedClips, ...cccHydratedClips];
  const sortedClips = allClips.sort((a, b) => a.startTime - b.startTime);
  const filteredClips = sortedClips.filter((clip) => clip.endTime - clip.startTime > 5);
  const combinedClips = {
    clips: filteredClips,
    videoId,
  };
  if (RUN_MONGO) {
    const result = await setClipData(MONGODB_FULL_URI_ARN, DB_NAME, videoId, combinedClips);
    console.log(result);
  }
  return combinedClips;
};
